{"version":3,"sources":["Utils.jsx","BlockRendererSVG.jsx","BlockContainer.jsx","ClockRendererSVG.jsx","ClockContainer.jsx","CircleRendererSVG.jsx","CircleContainer.jsx","AnimatedSVGBlock.jsx","StaffRendererSVG.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Utils","red","green","blue","color","redVal","Math","round","greenVal","blueVal","toString","padStart","from","to","t","lerp","BlockRendererSVG","colorString","getHexForFloats","this","props","react_default","a","createElement","x","y","width","height","strokeWidth","fill","stroke","x1","indicatorXOffset","y1","x2","y2","Component","BlockContainer","blocks","map","block","index","progress","src_BlockRendererSVG","key","pos","indicatorYOffset","indicatorHeight","fromRed","toRed","fromGreen","toGreen","fromBlue","toBlue","ClockRendererSVG","x3","y3","points","concat","transform","rotation","ClockContainer","src_ClockRendererSVG","bottom","top","middleX","middleY","cx","cy","r","CircleContainer","CircleRendererSVG","AnimatedSVGBlock","table","length","setState","reset","state","_this","init","renderprops","immediate","config","duration","onRest","bind","animatedProperties","hz","relativeHz","colorForIndex","src_BlockContainer","src_ClockContainer","src_CircleContainer","VF","Vex","Flow","StaffRendererSVG","chord","svgContainer","document","ctx","Renderer","Backends","SVG","getContext","stave","Stave","addClef","setContext","draw","bb","Formatter","FormatAndDraw","svg","childNodes","style","padding","max","h","left","position","overflow","display","refs","outer","appendChild","ref","margin","borderRadius","title","App","chordM3","StaveNote","keys","chordP4","chordP5","chordP8","className","border","src_StaffRendererSVG","src_AnimatedSVGBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fb1347d.chunk.js","sourcesContent":["class Utils {\n  // Each value are from 0.0 to 1.0\n  static getHexForFloats(red, green, blue) {\n    let color = \"#\";\n    let redVal = Math.round(red * 255);\n    let greenVal = Math.round(green * 255);\n    let blueVal = Math.round(blue * 255);\n\n    color += redVal.toString(16).padStart(2, 0);\n    color += greenVal.toString(16).padStart(2, 0);\n    color += blueVal.toString(16).padStart(2, 0);\n    return color;\n  }\n\n  static lerp(from, to, t) {\n    const lerp = t * (to - from) + from;\n    return lerp;\n  }\n}\n\nexport default Utils;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass BlockRendererSVG extends Component {\n\n  render() {\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    return (\n      <g>\n        <rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height}\n          strokeWidth={1}\n          fill={colorString}\n          stroke=\"black\"\n        />\n        <line\n          x1={this.props.x + this.props.indicatorXOffset}\n          y1={this.props.y}\n          x2={this.props.x + this.props.indicatorXOffset}\n          y2={this.props.y + this.props.height}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default BlockRendererSVG;\n","import React, { Component } from 'react';\nimport BlockRendererSVG from './BlockRendererSVG';\nimport Utils from './Utils';\n\nclass BlockContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <BlockRendererSVG\n          key={index}\n          x={10}\n          y={10 + block.pos * 20}\n          width={100}\n          height={20}\n          indicatorYOffset={10}\n          indicatorHeight={10}\n          indicatorXOffset={100 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default BlockContainer;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass ClockRendererSVG extends Component {\n\n  render() {\n\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    // Lower left\n    const x1 = this.props.x;\n    const y1 = this.props.y + this.props.height;\n\n    // Lower right\n    const x2 = x1 + this.props.width;\n    const y2 = y1;\n\n    // Top\n    const x3 = x1 + (this.props.width / 2);\n    const y3 = this.props.y\n\n    const points = `${x1},${y1} ${x2},${y2} ${x3},${y3}`;\n    const transform = `rotate(${this.props.rotation}, ${x3}, ${y1})`;\n\n    return (\n      <g transform={transform}>\n        <polygon\n          points={points}\n          fill={colorString}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport ClockRendererSVG from './ClockRendererSVG';\nimport Utils from './Utils';\n\nclass ClockContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <ClockRendererSVG\n          key={index}\n          x={50}\n          y={100}\n          width={10}\n          height={50}\n          rotation={360 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default ClockContainer;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass ClockRendererSVG extends Component {\n\n  render() {\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    const bottom = this.props.y + this.props.height;\n    const top = this.props.y\n\n    const middleX = this.props.x + (this.props.width / 2);\n    const middleY = top + (this.props.height / 2);\n\n    const transform = `rotate(${this.props.rotation}, ${middleX}, ${bottom})`;\n\n    return (\n      <g transform={transform}>\n        <circle\n          cx={middleX}\n          cy={middleY}\n          r={this.props.width}\n          fill={colorString}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport CircleRendererSVG from './CircleRendererSVG';\nimport Utils from './Utils';\n\nclass CircleContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <CircleRendererSVG\n          key={index}\n          x={50}\n          y={250}\n          width={10}\n          height={15}\n          rotation={360 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default CircleContainer;\n","import React, { Component } from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport BlockContainer from './BlockContainer';\nimport ClockContainer from './ClockContainer';\nimport CircleContainer from './CircleContainer';\n\nclass AnimatedSVGBlock extends Component {\n\n  colorForIndex(index) {\n\n    const table = [\n      {\n        red: 0.8,\n        green: 0,\n        blue: 0,\n      },\n      {\n        red: 0.3,\n        green: 0.3,\n        blue: 0.8,\n      },\n      {\n        red: 0,\n        green: 0.6,\n        blue: 0,\n      },\n      {\n        red: 0.7,\n        green: 0,\n        blue: 0.7,\n      },\n    ];\n    return table[index % table.length];\n  }\n\n  onRest() {\n    this.setState({ reset: !(this.state && this.state.reset) });\n  }\n\n  render() {\n    const duration = 3000;\n    const init = this.state && this.state.reset;\n\n    return (\n      <Spring\n        immediate={init}\n        to={{\n          progress: init ? 0.0 : 1.0,\n        }}\n        from={{\n          progress: 0.0,\n        }}\n        config={{\n          duration: duration,\n          reset: true,\n        }}\n        onRest={this.onRest.bind(this)}\n      >\n        {(animatedProperties) => {\n          const blocks = this.props.hz.map((relativeHz, index) => {\n            const color = this.colorForIndex(index);\n            return {\n              fromRed: 1.0,\n              toRed: color.red,\n              fromGreen: 1.0,\n              toGreen: color.green,\n              fromBlue: 1.0,\n              toBlue: color.blue,\n              pos: index,\n              progress: animatedProperties.progress * relativeHz,\n            };\n\n          });\n          const props = { blocks };\n          return (\n            <g>\n              <BlockContainer {...props} />\n              <ClockContainer {...props} />\n              <CircleContainer {...props} />\n            </g>\n          );\n\n        }}\n      </Spring>\n    );\n  }\n}\n\nexport default AnimatedSVGBlock;\n","import React, { Component } from 'react';\nimport Vex from 'vexflow';\n\nconst VF = Vex.Flow;\n\n// Reference from : https://gist.github.com/wchargin/96f2550531b67c379b3e\nclass StaffRendererSVG extends Component {\n  componentDidMount() {\n    const { chord } = this.props;\n    const svgContainer = document.createElement('div');\n    const renderer = new VF.Renderer(svgContainer, VF.Renderer.Backends.SVG);\n    const ctx = renderer.getContext();\n    const stave = new VF.Stave(0, 0, 100);\n    stave.addClef('treble').setContext(ctx).draw();\n    const bb = VF.Formatter.FormatAndDraw(ctx, stave, chord);\n\n    const svg = svgContainer.childNodes[0];\n    const padding = 10;\n    const half = padding / 2;\n\n    svg.style.top = -bb.y + half + Math.max(0, (100 - bb.h) * 2 / 3) + \"px\";\n    svg.style.height = Math.max(100, bb.h);\n    svg.style.left = \"0px\";\n    svg.style.width = 100 + \"px\";\n    svg.style.position = \"absolute\";\n    svg.style.overflow = \"visible\";\n    svgContainer.style.height = Math.max(100, bb.h + padding) + \"px\";\n    svgContainer.style.width = 100 + \"px\";\n    svgContainer.style.position = \"relative\";\n    svgContainer.style.display = \"inlineBlock\";\n    this.refs.outer.appendChild(svgContainer);\n  }\n\n  render() {\n    return (\n      <div ref=\"outer\" style={{\n        margin: \"auto\",\n        width: \"100px\",\n        padding: 10,\n        borderRadius: 10,\n        display: \"inline-float\"\n      }} >\n        {this.props.title}\n      </div>\n    );\n\n  }\n}\n\nexport default StaffRendererSVG;\n","import React, { Component } from 'react';\nimport AnimatedSVGBlock from './AnimatedSVGBlock';\nimport StaffRendererSVG from './StaffRendererSVG';\nimport Vex from 'vexflow';\nimport './App.css';\n\nconst VF = Vex.Flow;\n\nclass App extends Component {\n  render() {\n    const chordM3 = [new VF.StaveNote({\n      keys: [\"c/4\", \"e/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP4 = [new VF.StaveNote({\n      keys: [\"c/4\", \"f/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP5 = [new VF.StaveNote({\n      keys: [\"c/4\", \"g/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP8 = [new VF.StaveNote({\n      keys: [\"c/4\", \"c/5\"],\n      duration: \"h\",\n    })];\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          Harmony Blocks\n        </header>\n        <div className=\"svg-container\" style={{ border: \"black\", margin: \"auto\", display: \"block\" }}>\n          <div className=\"blocks-container\">\n            <StaffRendererSVG title=\"Major 3rd\" chord={chordM3} />\n            <svg height={300} width={120} margin=\"10px\">\n              <AnimatedSVGBlock hz={[5, 4]} />\n            </svg>\n          </div>\n\n          <div className=\"blocks-container\">\n            <StaffRendererSVG title=\"Perfect 4th\" chord={chordP4} />\n            <svg height={300} width={120}>\n              <AnimatedSVGBlock hz={[3, 4]} />\n            </svg>\n          </div>\n\n          <div className=\"blocks-container\">\n            <StaffRendererSVG title=\"Perfect 5th\" chord={chordP5} />\n            <svg height={300} width={120}>\n              <AnimatedSVGBlock hz={[6, 4]} />\n            </svg>\n          </div>\n\n          <div className=\"blocks-container\">\n            <StaffRendererSVG title=\"Octave\" chord={chordP8} />\n            <svg height={300} width={120}>\n              <AnimatedSVGBlock hz={[8, 4]} />\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}