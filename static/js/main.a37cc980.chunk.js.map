{"version":3,"sources":["Utils.jsx","BlockRendererSVG.jsx","BlockContainer.jsx","ClockRendererSVG.jsx","ClockContainer.jsx","CircleRendererSVG.jsx","CircleContainer.jsx","StaffRendererSVG.jsx","AnimatedHarmonyBlock.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Utils","red","green","blue","color","redVal","Math","round","greenVal","blueVal","toString","padStart","from","to","t","lerp","BlockRendererSVG","colorString","getHexForFloats","this","props","react_default","a","createElement","x","y","width","height","strokeWidth","fill","stroke","x1","indicatorXOffset","y1","x2","y2","Component","BlockContainer","blocks","map","block","index","progress","src_BlockRendererSVG","key","pos","indicatorYOffset","indicatorHeight","fromRed","toRed","fromGreen","toGreen","fromBlue","toBlue","ClockRendererSVG","x3","y3","points","concat","transform","rotation","ClockContainer","src_ClockRendererSVG","bottom","top","middleX","middleY","cx","cy","r","CircleContainer","CircleRendererSVG","VF","Vex","Flow","StaffRendererSVG","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","svgRef","React","createRef","chord","svgContainer","current","ctx","Renderer","Backends","SVG","getContext","stave","Stave","addClef","setContext","draw","bb","Formatter","FormatAndDraw","setState","svg","state","max","h","title","left","ref","AnimatedHarmonyBlock","table","length","reset","type","container","src_BlockContainer","src_ClockContainer","src_CircleContainer","init","renderprops","immediate","config","duration","onRest","bind","animatedProperties","hz","relativeHz","colorForIndex","staff","src_StaffRendererSVG","getContainerForType","className","App","chordM3","StaveNote","keys","chordP4","chordP5","chordP8","style","border","margin","display","src_AnimatedHarmonyBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a37cc980.chunk.js","sourcesContent":["class Utils {\n  // Each value are from 0.0 to 1.0\n  static getHexForFloats(red, green, blue) {\n    let color = \"#\";\n    let redVal = Math.round(red * 255);\n    let greenVal = Math.round(green * 255);\n    let blueVal = Math.round(blue * 255);\n\n    color += redVal.toString(16).padStart(2, 0);\n    color += greenVal.toString(16).padStart(2, 0);\n    color += blueVal.toString(16).padStart(2, 0);\n    return color;\n  }\n\n  static lerp(from, to, t) {\n    const lerp = t * (to - from) + from;\n    return lerp;\n  }\n}\n\nexport default Utils;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass BlockRendererSVG extends Component {\n\n  render() {\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    return (\n      <g>\n        <rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height}\n          strokeWidth={1}\n          fill={colorString}\n          stroke=\"black\"\n        />\n        <line\n          x1={this.props.x + this.props.indicatorXOffset}\n          y1={this.props.y}\n          x2={this.props.x + this.props.indicatorXOffset}\n          y2={this.props.y + this.props.height}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default BlockRendererSVG;\n","import React, { Component } from 'react';\nimport BlockRendererSVG from './BlockRendererSVG';\nimport Utils from './Utils';\n\nclass BlockContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <BlockRendererSVG\n          key={index}\n          x={10}\n          y={10 + block.pos * 20}\n          width={100}\n          height={20}\n          indicatorYOffset={10}\n          indicatorHeight={10}\n          indicatorXOffset={100 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default BlockContainer;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass ClockRendererSVG extends Component {\n\n  render() {\n\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    // Lower left\n    const x1 = this.props.x ? this.props.x : 0;\n    const y1 = (this.props.y ? this.props.y : 0) + this.props.height;\n\n    // Lower right\n    const x2 = x1 + this.props.width;\n    const y2 = y1;\n\n    // Top\n    const x3 = x1 + (this.props.width / 2);\n    const y3 = this.props.y ? this.props.y : 0;\n\n    const points = `${x1},${y1} ${x2},${y2} ${x3},${y3}`;\n    const transform = `rotate(${this.props.rotation}, ${x3}, ${y1})`;\n\n    return (\n      <g transform={transform}>\n        <polygon\n          points={points}\n          fill={colorString}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport ClockRendererSVG from './ClockRendererSVG';\nimport Utils from './Utils';\n\nclass ClockContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <ClockRendererSVG\n          key={index}\n          x={50}\n          y={0}\n          width={10}\n          height={30}\n          rotation={360 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default ClockContainer;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass ClockRendererSVG extends Component {\n\n  render() {\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    const bottom = this.props.y + this.props.height;\n    const top = this.props.y\n\n    const middleX = this.props.x + (this.props.width / 2);\n    const middleY = top + (this.props.height / 2);\n\n    const transform = `rotate(${this.props.rotation}, ${middleX}, ${bottom})`;\n\n    return (\n      <g transform={transform}>\n        <circle\n          cx={middleX}\n          cy={middleY}\n          r={this.props.width}\n          fill={colorString}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport CircleRendererSVG from './CircleRendererSVG';\nimport Utils from './Utils';\n\nclass CircleContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <CircleRendererSVG\n          key={index}\n          x={50}\n          y={10}\n          width={10}\n          height={15}\n          rotation={360 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default CircleContainer;\n","import React, { Component } from 'react';\nimport Vex from 'vexflow';\n\nconst VF = Vex.Flow;\n\nclass StaffRendererSVG extends Component {\n  constructor(props) {\n    super(props);\n    this.svgRef = React.createRef();\n  }\n  componentDidMount() {\n    const { chord } = this.props;\n    const svgContainer = this.svgRef.current;\n    const renderer = new VF.Renderer(svgContainer, VF.Renderer.Backends.SVG);\n    const ctx = renderer.getContext();\n    const stave = new VF.Stave(0, 0, 100);\n    stave.addClef('treble').setContext(ctx).draw();\n    const bb = VF.Formatter.FormatAndDraw(ctx, stave, chord);\n    this.setState({ bb });\n  }\n\n  render() {\n\n    let svg = this.state ? this.state.svg : null;\n    const bb = this.state ? this.state.bb : null;\n    const x = bb ? bb.x : 0;\n    const y = bb ? bb.y : 0;\n    const top = y;\n    const height = bb ? Math.max(200, bb.h) : 0;\n    const left = \"0px\";\n    const width = 100 + \"px\";\n\n    const title = this.props.title;\n    return (\n      <svg\n        x={x}\n        y={y}\n        top={top}\n        left={left}\n        width={width}\n        height={height}\n        ref={this.svgRef}\n      >\n        <text>{title}</text>\n        {svg}\n      </svg>\n    );\n  }\n}\n\nexport default StaffRendererSVG;\n","import React, { Component } from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport BlockContainer from './BlockContainer';\nimport ClockContainer from './ClockContainer';\nimport CircleContainer from './CircleContainer';\nimport StaffRendererSVG from './StaffRendererSVG';\n\nclass AnimatedHarmonyBlock extends Component {\n\n  colorForIndex(index) {\n\n    const table = [\n      {\n        red: 0.8,\n        green: 0,\n        blue: 0,\n      },\n      {\n        red: 0.3,\n        green: 0.3,\n        blue: 0.8,\n      },\n      {\n        red: 0,\n        green: 0.6,\n        blue: 0,\n      },\n      {\n        red: 0.7,\n        green: 0,\n        blue: 0.7,\n      },\n    ];\n    return table[index % table.length];\n  }\n\n  onRest() {\n    this.setState({ reset: !(this.state && this.state.reset) });\n  }\n\n  getContainerForType(type, props) {\n    let container = null;\n    switch (type) {\n      case \"block\":\n        container = <BlockContainer {...props} />;\n        break;\n      case \"clock\":\n        container = <ClockContainer {...props} />;\n        break;\n      case \"circle\":\n      default:\n        container = <CircleContainer {...props} />;\n        break;\n    }\n\n    return container;\n  }\n\n  render() {\n    const duration = 3000;\n    const init = this.state && this.state.reset;\n\n    return (\n      <Spring\n        immediate={init}\n        to={{\n          progress: init ? 0.0 : 1.0,\n        }}\n        from={{\n          progress: 0.0,\n        }}\n        config={{\n          duration: duration,\n          reset: true,\n        }}\n        onRest={this.onRest.bind(this)}\n      >\n        {(animatedProperties) => {\n          const blocks = this.props.hz.map((relativeHz, index) => {\n            const color = this.colorForIndex(index);\n            return {\n              fromRed: 1.0,\n              toRed: color.red,\n              fromGreen: 1.0,\n              toGreen: color.green,\n              fromBlue: 1.0,\n              toBlue: color.blue,\n              pos: index,\n              progress: animatedProperties.progress * relativeHz,\n            };\n\n          });\n\n          const chord = this.props.chord;\n          const title = this.props.title;\n          const staff = this.props.chord ?\n            <StaffRendererSVG title={title} chord={chord} /> :\n            null;\n\n          const props = { blocks };\n          const container = this.getContainerForType(this.props.type, props);\n\n          return (\n            <div className=\"blocks-container\">\n              {title}\n              <svg>\n                {staff}\n                {container}\n              </svg>\n            </div>\n          );\n        }}\n      </Spring>\n    );\n  }\n}\n\nexport default AnimatedHarmonyBlock;\n","import React, { Component } from 'react';\nimport AnimatedHarmonyBlock from './AnimatedHarmonyBlock';\nimport Vex from 'vexflow';\nimport './App.css';\n\nconst VF = Vex.Flow;\n\nclass App extends Component {\n  render() {\n    const chordM3 = [new VF.StaveNote({\n      keys: [\"c/4\", \"e/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP4 = [new VF.StaveNote({\n      keys: [\"c/4\", \"f/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP5 = [new VF.StaveNote({\n      keys: [\"c/4\", \"g/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP8 = [new VF.StaveNote({\n      keys: [\"c/4\", \"c/5\"],\n      duration: \"h\",\n    })];\n\n    const height = 150;\n    const width = 120;\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          Harmony Blocks\n        </header>\n        <div className=\"svg-container\" style={{ border: \"black\", margin: \"auto\", display: \"block\" }}>\n          <div className=\"blocks-container\">\n            Major 3rd\n            <AnimatedHarmonyBlock\n              height={height}\n              width={width}\n              chord={chordM3}\n              type=\"clock\"\n              hz={[5, 4]}\n            />\n          </div>\n\n          <div className=\"blocks-container\">\n            Perfect 4th\n            <AnimatedHarmonyBlock\n              chord={chordP4}\n              type=\"circle\"\n              hz={[3, 4]}\n            />\n          </div>\n\n          <div className=\"blocks-container\">\n            Perfect 5th\n            <AnimatedHarmonyBlock chord={chordP5} type=\"block\" hz={[6, 4]} />\n          </div>\n\n          <div className=\"blocks-container\">\n            Octave\n            <AnimatedHarmonyBlock chord={chordP8} type=\"circle\" hz={[8, 4]} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}