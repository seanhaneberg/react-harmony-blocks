{"version":3,"sources":["BlockRendererSVG.jsx","BlockContainer.jsx","ClockRendererSVG.jsx","ClockContainer.jsx","CircleRendererSVG.jsx","CircleContainer.jsx","AnimatedSVGBlock.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BlockRendererSVG","red","green","blue","color","redVal","Math","round","greenVal","blueVal","toString","padStart","colorString","this","getHexForFloats","props","react_default","a","createElement","x","y","width","height","strokeWidth","fill","stroke","x1","indicatorXOffset","y1","x2","y2","Component","BlockContainer","from","to","t","lerp","_this","blocks","map","block","index","progress","src_BlockRendererSVG","key","pos","indicatorYOffset","indicatorHeight","fromRed","toRed","fromGreen","toGreen","fromBlue","toBlue","ClockRendererSVG","x3","y3","points","concat","transform","rotation","ClockContainer","src_ClockRendererSVG","cx","cy","r","CircleContainer","CircleRendererSVG","AnimatedSVGBlock","table","length","setState","reset","state","init","renderprops","immediate","config","duration","onRest","bind","animatedProperties","hz","relativeHz","colorForIndex","src_BlockContainer","src_ClockContainer","src_CircleContainer","App","className","style","border","margin","src_AnimatedSVGBlock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b93ed4a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass BlockRendererSVG extends Component {\n\n  // Each value are from 0.0 to 1.0\n  getHexForFloats(red, green, blue) {\n    let color = \"#\";\n    let redVal = Math.round(red * 255);\n    let greenVal = Math.round(green * 255);\n    let blueVal = Math.round(blue * 255);\n\n    color += redVal.toString(16).padStart(2, 0);\n    color += greenVal.toString(16).padStart(2, 0);\n    color += blueVal.toString(16).padStart(2, 0);\n    return color;\n  }\n\n  render() {\n    const colorString = this.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    return (\n      <g>\n        <rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height}\n          strokeWidth={1}\n          fill={colorString}\n          stroke=\"black\"\n        />\n        <line\n          x1={this.props.x + this.props.indicatorXOffset}\n          y1={this.props.y}\n          x2={this.props.x + this.props.indicatorXOffset}\n          y2={this.props.y + this.props.height}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default BlockRendererSVG;\n","import React, { Component } from 'react';\nimport BlockRendererSVG from './BlockRendererSVG';\n\nclass BlockContainer extends Component {\n\n  lerp(from, to, t) {\n    const lerp = t * (to - from) + from;\n    return lerp;\n  }\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <BlockRendererSVG\n          key={index}\n          x={10}\n          y={10 + block.pos * 20}\n          width={100}\n          height={20}\n          indicatorYOffset={10}\n          indicatorHeight={10}\n          indicatorXOffset={100 * progress}\n          red={this.lerp(block.fromRed, block.toRed, progress)}\n          green={this.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={this.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default BlockContainer;\n","import React, { Component } from 'react';\n\nclass ClockRendererSVG extends Component {\n\n  // Each value are from 0.0 to 1.0\n  getHexForFloats(red, green, blue) {\n    let color = \"#\";\n    let redVal = Math.round(red * 255);\n    let greenVal = Math.round(green * 255);\n    let blueVal = Math.round(blue * 255);\n\n    color += redVal.toString(16).padStart(2, 0);\n    color += greenVal.toString(16).padStart(2, 0);\n    color += blueVal.toString(16).padStart(2, 0);\n    return color;\n  }\n\n  render() {\n\n    const colorString = this.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    // Lower left\n    const x1 = this.props.x;\n    const y1 = this.props.y + this.props.height;\n\n    // Lower right\n    const x2 = x1 + this.props.width;\n    const y2 = y1;\n\n    // Top\n    const x3 = x1 + (this.props.width / 2);\n    const y3 = this.props.y\n\n    const points = `${x1},${y1} ${x2},${y2} ${x3},${y3}`;\n    const transform = `rotate(${this.props.rotation}, ${x3}, ${y1})`;\n\n    return (\n      <g transform={transform}>\n        <polygon\n          points={points}\n          fill={colorString}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport ClockRendererSVG from './ClockRendererSVG';\n\nclass ClockContainer extends Component {\n\n  lerp(from, to, t) {\n    const lerp = t * (to - from) + from;\n    return lerp;\n  }\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <ClockRendererSVG\n          key={index}\n          x={50}\n          y={100}\n          width={10}\n          height={50}\n          rotation={360 * progress}\n          red={this.lerp(block.fromRed, block.toRed, progress)}\n          green={this.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={this.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default ClockContainer;\n","import React, { Component } from 'react';\n\nclass ClockRendererSVG extends Component {\n\n  // Each value are from 0.0 to 1.0\n  getHexForFloats(red, green, blue) {\n    let color = \"#\";\n    let redVal = Math.round(red * 255);\n    let greenVal = Math.round(green * 255);\n    let blueVal = Math.round(blue * 255);\n\n    color += redVal.toString(16).padStart(2, 0);\n    color += greenVal.toString(16).padStart(2, 0);\n    color += blueVal.toString(16).padStart(2, 0);\n    return color;\n  }\n\n  render() {\n\n    const colorString = this.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    // Lower left\n    const x1 = this.props.x;\n    const y1 = this.props.y + this.props.height;\n\n    // Middle\n    const x3 = x1 + (this.props.width / 2);\n    const y3 = this.props.y\n\n    const transform = `rotate(${this.props.rotation}, ${x3}, ${y1})`;\n\n    return (\n      <g transform={transform}>\n        <circle\n          cx={x3}\n          cy={y3}\n          r={this.props.width}\n          fill={colorString}\n          stroke=\"black\"\n        />\n      </g>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport CircleRendererSVG from './CircleRendererSVG';\n\nclass CircleContainer extends Component {\n\n  lerp(from, to, t) {\n    const lerp = t * (to - from) + from;\n    return lerp;\n  }\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <CircleRendererSVG\n          key={index}\n          x={50}\n          y={250}\n          width={10}\n          height={5}\n          rotation={360 * progress}\n          red={this.lerp(block.fromRed, block.toRed, progress)}\n          green={this.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={this.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <g>{ blocks }</g> );\n  }\n}\n\nexport default CircleContainer;\n","import React, { Component } from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport BlockContainer from './BlockContainer';\nimport ClockContainer from './ClockContainer';\nimport CircleContainer from './CircleContainer';\n\nclass AnimatedSVGBlock extends Component {\n\n  colorForIndex(index) {\n\n    const table = [\n      {\n        red: 0.8,\n        green: 0,\n        blue: 0,\n      },\n      {\n        red: 0.3,\n        green: 0.3,\n        blue: 0.8,\n      },\n      {\n        red: 0,\n        green: 0.6,\n        blue: 0,\n      },\n      {\n        red: 0.7,\n        green: 0,\n        blue: 0.7,\n      },\n    ];\n    return table[index % table.length];\n  }\n\n  onRest() {\n    this.setState({ reset: !(this.state && this.state.reset) });\n  }\n\n  render() {\n    const duration = 3000;\n    const init = this.state && this.state.reset;\n\n    return (\n      <Spring\n        immediate={init}\n        to={{\n          progress: init ? 0.0 : 1.0,\n        }}\n        from={{\n          progress: 0.0,\n        }}\n        config={{\n          duration: duration,\n          reset: true,\n        }}\n        onRest={this.onRest.bind(this)}\n      >\n        {(animatedProperties) => {\n          const blocks = this.props.hz.map((relativeHz, index) => {\n            const color = this.colorForIndex(index);\n            return {\n              fromRed: 1.0,\n              toRed: color.red,\n              fromGreen: 1.0,\n              toGreen: color.green,\n              fromBlue: 1.0,\n              toBlue: color.blue,\n              pos: index,\n              progress: animatedProperties.progress * relativeHz,\n            };\n\n          });\n          const props = { blocks };\n          return (\n            <g>\n              <BlockContainer {...props} />\n              <ClockContainer {...props} />\n              <CircleContainer {...props} />\n            </g>\n          );\n\n        }}\n      </Spring>\n    );\n  }\n}\n\nexport default AnimatedSVGBlock;\n","import React, { Component } from 'react';\nimport AnimatedSVGBlock from './AnimatedSVGBlock';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          Harmony Blocks\n        </header>\n        <div className=\"svg-container\" style={{ border: \"black\", margin: \"10px\" }}>\n          <svg x={0} y={10} height={500} width={200}>\n            <AnimatedSVGBlock hz={[5, 4]} />\n          </svg>\n          <svg x={250} y={10} height={500} width={200}>\n            <AnimatedSVGBlock hz={[3, 4]} />\n          </svg>\n          <svg x={500} y={10} height={500} width={200}>\n            <AnimatedSVGBlock hz={[8, 4]} />\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}