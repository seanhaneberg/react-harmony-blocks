{"version":3,"sources":["Utils.jsx","BlockRendererSVG.jsx","BlockContainer.jsx","ClockRendererSVG.jsx","ClockContainer.jsx","CircleRendererSVG.jsx","CircleContainer.jsx","CircleRendererGL.jsx","CircleGLContainer.jsx","StaffRendererSVG.jsx","DotRendererSVG.jsx","DotContainer.jsx","AnimatedHarmonyBlock.jsx","App.jsx","serviceWorker.js","index.js","Circle.glsl"],"names":["Utils","red","green","blue","color","redVal","Math","round","greenVal","blueVal","toString","padStart","from","to","t","lerp","BlockRendererSVG","colorString","getHexForFloats","this","props","react_default","a","createElement","x","y","width","height","strokeWidth","fill","stroke","x1","indicatorXOffset","y1","x2","y2","Component","BlockContainer","blocks","map","block","index","progress","src_BlockRendererSVG","key","pos","indicatorYOffset","indicatorHeight","fromRed","toRed","fromGreen","toGreen","fromBlue","toBlue","ClockRendererSVG","x3","y3","points","concat","transform","rotation","ClockContainer","src_ClockRendererSVG","CircleRendererSVG","bottom","top","middleX","middleY","cx","cy","r","CircleContainer","src_CircleRendererSVG","CircleRendererGL","setState","shader","node","state","shaders","Shaders","create","circle","frag","GLSL","_templateObject","gl_react_dom_lib","lib","uniforms","u_resolution","u_frequencies","CircleGLContainer","src_CircleRendererGL","VF","Vex","Flow","StaffRendererSVG","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","svgRef","React","createRef","chord","svgContainer","current","ctx","Renderer","Backends","SVG","getContext","stave","Stave","addClef","setContext","draw","bb","Formatter","FormatAndDraw","svg","max","h","title","left","ref","DotRendererSVG","DotContainer","dots","i","hz","push","src_DotRendererSVG","AnimatedHarmonyBlock","table","getColorTable","length","reset","type","container","src_BlockContainer","src_DotContainer","src_ClockContainer","src_CircleContainer","src_CircleGLContainer","_this2","init","renderprops","immediate","config","duration","onRest","bind","animatedProperties","relativeHz","colorForIndex","staff","src_StaffRendererSVG","getContainerForType","className","App","chordM3","StaveNote","keys","chordP4","chordP5","chordP8","options","getVisualizationOptions","style","border","margin","display","src_AnimatedHarmonyBlock","major_third_type","react_select_esm","onChange","option","value","perfect_fourth_type","perfect_fifth_type","octave_type","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d335aeca.chunk.js","sourcesContent":["class Utils {\n  // Each value are from 0.0 to 1.0\n  static getHexForFloats(red, green, blue) {\n    let color = \"#\";\n    let redVal = Math.round(red * 255);\n    let greenVal = Math.round(green * 255);\n    let blueVal = Math.round(blue * 255);\n\n    color += redVal.toString(16).padStart(2, 0);\n    color += greenVal.toString(16).padStart(2, 0);\n    color += blueVal.toString(16).padStart(2, 0);\n    return color;\n  }\n\n  static lerp(from, to, t) {\n    const lerp = t * (to - from) + from;\n    return lerp;\n  }\n}\n\nexport default Utils;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass BlockRendererSVG extends Component {\n\n  render() {\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    return (\n      <svg>\n        <g>\n          <rect\n            x={this.props.x}\n            y={this.props.y}\n            width={this.props.width}\n            height={this.props.height}\n            strokeWidth={1}\n            fill={colorString}\n            stroke=\"black\"\n          />\n          <line\n            x1={this.props.x + this.props.indicatorXOffset}\n            y1={this.props.y}\n            x2={this.props.x + this.props.indicatorXOffset}\n            y2={this.props.y + this.props.height}\n            stroke=\"black\"\n          />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BlockRendererSVG;\n","import React, { Component } from 'react';\nimport BlockRendererSVG from './BlockRendererSVG';\nimport Utils from './Utils';\n\nclass BlockContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <BlockRendererSVG\n          key={index}\n          x={10}\n          y={10 + block.pos * 20}\n          width={100}\n          height={20}\n          indicatorYOffset={10}\n          indicatorHeight={10}\n          indicatorXOffset={100 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return (<svg>{ blocks }</svg>);\n  }\n}\n\nexport default BlockContainer;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass ClockRendererSVG extends Component {\n\n  render() {\n\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    // Lower left\n    const x1 = this.props.x ? this.props.x : 0;\n    const y1 = (this.props.y ? this.props.y : 0) + this.props.height;\n\n    // Lower right\n    const x2 = x1 + this.props.width;\n    const y2 = y1;\n\n    // Top\n    const x3 = x1 + (this.props.width / 2);\n    const y3 = this.props.y ? this.props.y : 0;\n\n    const points = `${x1},${y1} ${x2},${y2} ${x3},${y3}`;\n    const transform = `rotate(${this.props.rotation}, ${x3}, ${y1})`;\n\n    return (\n      <svg>\n        <g transform={transform}>\n          <polygon\n            points={points}\n            fill={colorString}\n            stroke=\"black\"\n          />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default ClockRendererSVG;\n","import React, { Component } from 'react';\nimport ClockRendererSVG from './ClockRendererSVG';\nimport Utils from './Utils';\n\nclass ClockContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <ClockRendererSVG\n          key={index}\n          x={50}\n          y={0}\n          width={10}\n          height={30}\n          rotation={360 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return ( <svg>{ blocks }</svg> );\n  }\n}\n\nexport default ClockContainer;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass CircleRendererSVG extends Component {\n\n  render() {\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    const bottom = this.props.y + this.props.height;\n    const top = this.props.y\n\n    const middleX = this.props.x + (this.props.width / 2);\n    const middleY = top + (this.props.height / 2);\n\n    const transform = `rotate(${this.props.rotation}, ${middleX}, ${bottom})`;\n\n    return (\n      <svg>\n        <g transform={transform}>\n          <circle\n            cx={middleX}\n            cy={middleY}\n            r={this.props.width}\n            fill={colorString}\n            stroke=\"black\"\n          />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default CircleRendererSVG;\n","import React, { Component } from 'react';\nimport CircleRendererSVG from './CircleRendererSVG';\nimport Utils from './Utils';\n\nclass CircleContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n    const progress = block.progress % 1.0;\n      return (\n        <CircleRendererSVG\n          key={index}\n          x={50}\n          y={10}\n          width={10}\n          height={15}\n          rotation={360 * progress}\n          red={Utils.lerp(block.fromRed, block.toRed, progress)}\n          green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n          blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n        />\n      );\n    });\n\n    return (<svg>{ blocks }</svg>);\n  }\n}\n\nexport default CircleContainer;\n","import React, { Component } from 'react';\nimport { Shaders, Node, GLSL } from 'gl-react';\nimport { Surface } from 'gl-react-dom';\nimport shader from './Circle.glsl'\n\nclass CircleRendererGL extends Component {\n  componentDidMount() {\n    this.setState({ shader: shader });\n  }\n\n  render() {\n    let node = null;\n    if (this.state && this.state.shader) {\n      const shaders = Shaders.create({\n        circle: {\n          frag: GLSL`${this.state.shader}`\n        }\n      });\n\n      node =\n        <Surface width={100} height={100}>\n          <Node\n            shader={shaders.circle}\n            uniforms={{\n              u_resolution: [100, 100],\n              u_frequencies: [this.props.blocks[0].progress,\n                              this.props.blocks[1].progress],\n            }}\n          />\n        </Surface>\n    }\n\n    return (\n      <div>\n        {node}\n      </div>\n    );\n  }\n}\n\nexport default CircleRendererGL;\n","import React, { Component } from 'react';\nimport CircleRendererGL from './CircleRendererGL';\n\nclass CircleGLContainer extends Component {\n\n  render() {\n    return (\n      <CircleRendererGL\n        x={50}\n        y={10}\n        width={10}\n        height={15}\n        blocks={this.props.blocks}\n      />\n    );\n  }\n}\n\nexport default CircleGLContainer;\n","import React, { Component } from 'react';\nimport Vex from 'vexflow';\n\nconst VF = Vex.Flow;\n\nclass StaffRendererSVG extends Component {\n  constructor(props) {\n    super(props);\n    this.svgRef = React.createRef();\n  }\n  componentDidMount() {\n    const { chord } = this.props;\n    const svgContainer = this.svgRef.current;\n    const renderer = new VF.Renderer(svgContainer, VF.Renderer.Backends.SVG);\n    const ctx = renderer.getContext();\n    const stave = new VF.Stave(0, 0, 100);\n    stave.addClef('treble').setContext(ctx).draw();\n    const bb = VF.Formatter.FormatAndDraw(ctx, stave, chord);\n    this.setState({ bb });\n  }\n\n  render() {\n\n    let svg = this.state ? this.state.svg : null;\n    const bb = this.state ? this.state.bb : null;\n    const x = bb ? bb.x : 0;\n    const y = bb ? bb.y : 0;\n    const top = y;\n    const height = bb ? Math.max(200, bb.h) : 0;\n    const left = \"0px\";\n    const width = 100 + \"px\";\n\n    const title = this.props.title;\n    return (\n      <svg\n        x={x}\n        y={y}\n        top={top}\n        left={left}\n        width={width}\n        height={height}\n        ref={this.svgRef}\n      >\n        <text>{title}</text>\n        {svg}\n      </svg>\n    );\n  }\n}\n\nexport default StaffRendererSVG;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\n\nclass DotRendererSVG extends Component {\n\n  render() {\n\n    const colorString = Utils.getHexForFloats(\n      this.props.red,\n      this.props.green,\n      this.props.blue\n    );\n\n    return (\n      <svg>\n        <circle\n          cx={this.props.x}\n          cy={this.props.y}\n          r={this.props.width}\n          fill={colorString}\n        />\n      </svg>\n    );\n  }\n}\n\nexport default DotRendererSVG;\n","import React, { Component } from 'react';\nimport DotRendererSVG from './DotRendererSVG';\nimport Utils from './Utils';\n\nclass DotContainer extends Component {\n\n  render() {\n    const blocks = this.props.blocks.map((block, index) => {\n      let dots = [];\n      // TODO: Figure out how to do this for fractional ratios\n      for (let i = 0; i < block.hz; i++) {\n        const coef = (i + 1);\n        const progress = 1 - ((coef) * block.progress % 1.0)\n\n        dots.push(\n          <DotRendererSVG\n            key={index + i}\n            x={15 * (index + 5)}\n            y={10 + (20 * i)}\n            width={5}\n            height={5}\n            red={Utils.lerp(block.fromRed, block.toRed, progress)}\n            green={Utils.lerp(block.fromGreen, block.toGreen, progress)}\n            blue={Utils.lerp(block.fromBlue, block.toBlue, progress)}\n          />\n        );\n      }\n      return dots;\n    });\n\n    return (<svg>{blocks}</svg>);\n  }\n}\n\nexport default DotContainer;\n","import React, { Component } from 'react';\nimport { Spring } from 'react-spring/renderprops';\nimport BlockContainer from './BlockContainer';\nimport ClockContainer from './ClockContainer';\nimport CircleContainer from './CircleContainer';\nimport CircleGLContainer from './CircleGLContainer';\nimport StaffRendererSVG from './StaffRendererSVG';\nimport DotContainer from './DotContainer';\n\nclass AnimatedHarmonyBlock extends Component {\n  constructor(props) {\n    super(props);\n    this.table = AnimatedHarmonyBlock.getColorTable();\n  }\n\n  static getColorTable() {\n    return [\n      {\n        red: 0.8,\n        green: 0,\n        blue: 0,\n      },\n      {\n        red: 0.3,\n        green: 0.3,\n        blue: 0.8,\n      },\n      {\n        red: 0,\n        green: 0.6,\n        blue: 0,\n      },\n      {\n        red: 0.7,\n        green: 0,\n        blue: 0.7,\n      },\n    ];\n  }\n\n  colorForIndex(index) {\n    return this.table[index % this.table.length];\n  }\n\n  onRest() {\n    this.setState({ reset: !(this.state && this.state.reset) });\n  }\n\n  getContainerForType(type, props) {\n    let container = null;\n    switch (type) {\n      case \"block\":\n        container = <BlockContainer {...props} />;\n        break;\n      case \"dots\":\n        container = <DotContainer {...props} />;\n        break;\n      case \"clock\":\n        container = <ClockContainer {...props} />;\n        break;\n      case \"circle\":\n        container = <CircleContainer {...props} />;\n        break;\n      case \"circleGL\":\n      default:\n        container = <CircleGLContainer {...props} />;\n        break;\n    }\n\n    return container;\n  }\n\n  render() {\n    const duration = 3000;\n    const init = this.state && this.state.reset;\n\n    return (\n      <Spring\n        immediate={init}\n        to={{\n          progress: init ? 0.0 : 1.0,\n        }}\n        from={{\n          progress: 0.0,\n        }}\n        config={{\n          duration: duration,\n          reset: true,\n        }}\n        onRest={this.onRest.bind(this)}\n      >\n        {(animatedProperties) => {\n          const blocks = this.props.hz.map((relativeHz, index) => {\n            const color = this.colorForIndex(index);\n            return {\n              fromRed: 1.0,\n              toRed: color.red,\n              fromGreen: 1.0,\n              toGreen: color.green,\n              fromBlue: 1.0,\n              toBlue: color.blue,\n              pos: index,\n              progress: animatedProperties.progress * relativeHz,\n              hz: relativeHz,\n            };\n\n          });\n\n          const chord = this.props.chord;\n          const title = this.props.title;\n          const staff = this.props.chord ?\n            <StaffRendererSVG title={title} chord={chord} /> :\n            null;\n\n          const props = { blocks };\n          const type = this.props.type ? this.props.type : \"block\";\n          const container = this.getContainerForType(type, props);\n\n          return (\n            <div className=\"blocks-container\">\n              {title}\n              {staff}\n              {container}\n            </div>\n          );\n        }}\n      </Spring>\n    );\n  }\n}\n\nexport default AnimatedHarmonyBlock;\n","import React, { Component } from 'react';\nimport AnimatedHarmonyBlock from './AnimatedHarmonyBlock';\nimport Vex from 'vexflow';\nimport Select from 'react-select';\nimport './App.css';\n\nconst VF = Vex.Flow;\n\nclass App extends Component {\n\n  static getVisualizationOptions() {\n    return [\n      { label: \"Block\", value: \"block\" },\n      { label: \"Dots\", value: \"dots\" },\n      { label: \"Clock\", value: \"clock\" },\n      { label: \"Circle\", value: \"circle\" },\n      { label: \"Circle GL\", value: \"circleGL\" },\n    ];\n\n  }\n\n  render() {\n    const chordM3 = [new VF.StaveNote({\n      keys: [\"c/4\", \"e/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP4 = [new VF.StaveNote({\n      keys: [\"c/4\", \"f/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP5 = [new VF.StaveNote({\n      keys: [\"c/4\", \"g/4\"],\n      duration: \"h\",\n    })];\n\n    const chordP8 = [new VF.StaveNote({\n      keys: [\"c/4\", \"c/5\"],\n      duration: \"h\",\n    })];\n\n    const height = 150;\n    const width = 120;\n    const options = App.getVisualizationOptions();\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          Harmony Blocks\n        </header>\n        <div className=\"svg-container\" style={{ border: \"black\", margin: \"auto\", display: \"block\" }}>\n          <div className=\"blocks-container\">\n            Major 3rd\n            <AnimatedHarmonyBlock\n              height={height}\n              width={width}\n              chord={chordM3}\n              type={this.state && this.state.major_third_type}\n              hz={[5, 4]}\n            />\n            <Select options={options}\n              onChange={(option) => {\n                this.setState({ major_third_type: option.value });\n              }}\n            />\n          </div>\n\n          <div className=\"blocks-container\">\n            Perfect 4th\n\n            <Select options={options}\n              onChange={(option) => {\n                this.setState({ perfect_fourth_type: option.value });\n              }}\n            />\n            <AnimatedHarmonyBlock\n              chord={chordP4}\n              type={this.state && this.state.perfect_fourth_type}\n              hz={[3, 4]}\n            />\n          </div>\n\n          <div className=\"blocks-container\">\n            Perfect 5th\n            <Select options={options}\n              onChange={(option) => {\n                this.setState({ perfect_fifth_type: option.value });\n              }}\n            />\n            <AnimatedHarmonyBlock\n              chord={chordP5}\n              type={this.state && this.state.perfect_fifth_type}\n              hz={[6, 4]} />\n          </div>\n\n          <div className=\"blocks-container\">\n            Octave\n            <Select options={options}\n              onChange={(option) => {\n                this.setState({ octave_type: option.value });\n              }}\n            />\n            <AnimatedHarmonyBlock\n              chord={chordP8}\n              type={this.state && this.state.octave_type}\n              hz={[8, 4]} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = \"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform vec2 u_frequencies;\\n\\n#define PI_TWO 1.570796326794897\\n#define PI 3.141592653589793\\n#define TWO_PI 6.283185307179586\\n\\nmat2 rotate2D(in float _angle){\\n  return mat2(cos(_angle),\\n  -sin(_angle),\\n  sin(_angle),\\n  cos(_angle));\\n}\\n\\nvec3 circle(in vec2 st,in float radius,in vec3 color, in float progress){\\n  vec2 rxy=vec2(.5,.6);\\n  vec2 cxy=vec2(.5,.5);\\n  st-=rxy;\\n  st=rotate2D(-progress * TWO_PI)*st;\\n  st+=rxy;\\n  float dist=distance(st,cxy);\\n  return color-step(radius,dist);\\n}\\n\\nvoid main(){\\n  vec2 st=gl_FragCoord.xy/u_resolution.xy;\\n  vec3 c1=circle(st,.1,vec3(.2,.2,.9),u_frequencies.x);\\n  vec3 c2=circle(st,.1,vec3(.9,.2,.2),u_frequencies.y);\\n  vec3 color=max(c1,c2);\\n  gl_FragColor=vec4(color,1.);\\n}\""],"sourceRoot":""}